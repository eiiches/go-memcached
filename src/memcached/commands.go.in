// +build !generate

package memcached

{{range $command := .commands}}
	type {{$command.name}}Command struct {
		key    []byte
		{{if $command.has_value}}
			value  []byte
		{{end}}
		{{if $command.has_expire}}
			expire uint32
		{{end}}
		{{if $command.has_cas}}
			cas    uint64
		{{end}}
		{{if $command.has_quiet}}
			quiet bool
		{{end}}
		{{range $arg := $command.extra_args}}
			{{$arg.var}} {{$arg.type}}
		{{end}}
	}

	func {{if $command.private }}{{$command.name}}{{else}}{{$command.name | snakeToUpperCamel}}{{end}}({{if $command.has_key}}key []byte {{if $command.has_value}}, value []byte{{end}}{{end}} {{range $arg := $command.extra_args}}, {{$arg.var}} {{$arg.type}}{{end}}) *{{$command.name}}Command {
		return &{{$command.name}}Command{
			{{if $command.has_key}}key:   key,{{end}}
			{{if $command.has_value}}value: value,{{end}}
			{{range $arg := $command.extra_args}}{{$arg.var}}: {{$arg.var}},{{end}}
		}
	}

	{{if $command.has_expire}}
		func (self *{{$command.name}}Command) WithExpire(expire uint32) *{{$command.name}}Command {
			self.expire = expire
			return self
		}
	{{end}}

	{{if $command.has_cas}}
		func (self *{{$command.name}}Command) WithCas(cas uint64) *{{$command.name}}Command {
			self.cas = cas
			return self
		}
	{{end}}

	{{if $command.has_quiet}}
		func (self *{{$command.name}}Command) WithQuiet(quiet bool) *{{$command.name}}Command {
			self.quiet = quiet
			return self
		}
	{{end}}

{{end}}

type serverCommand interface {
	execute(server *MemcachedServer)
}

func (self setCommand) execute(server *MemcachedServer) {
	if self.cas != 0 {
		server.cache.CompareAndSet(self.key, self.value, self.cas, self.expire)
	} else {
		server.cache.Put(self.key, self.value, self.expire)
	}
}

func (self addCommand) execute(server *MemcachedServer) {
}

func (self getCommand) execute(server *MemcachedServer) {
}

func (self replaceCommand) execute(server *MemcachedServer) {
}

func (self deleteCommand) execute(server *MemcachedServer) {
}

func (self incrementCommand) execute(server *MemcachedServer) {
}

func (self decrementCommand) execute(server *MemcachedServer) {
}

func (self quitCommand) execute(server *MemcachedServer) {
}

func (self flushCommand) execute(server *MemcachedServer) {
}

func (self versionCommand) execute(server *MemcachedServer) {
}

func (self nopCommand) execute(server *MemcachedServer) {
}

func (self getWithKeyCommand) execute(server *MemcachedServer) {
}

func (self appendCommand) execute(server *MemcachedServer) {
}

func (self prependCommand) execute(server *MemcachedServer) {
}

func (self statCommand) execute(server *MemcachedServer) {
}
