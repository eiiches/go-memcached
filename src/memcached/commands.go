// DO NOT EDIT THIS FILE
// This file is generated from commands.go.in

// +build !generate

package memcached



type deleteCommand struct {
	key    []byte


	cas    uint64
}

func Delete(key []byte) *deleteCommand {
	return &deleteCommand{
		key:   key,

	}
}



func (self *deleteCommand) WithCas(cas uint64) *deleteCommand {
	self.cas = cas
	return self
}



type appendCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Append(key []byte, value []byte) *appendCommand {
	return &appendCommand{
		key:   key,
		value: value,
	}
}


func (self *appendCommand) WithExpire(expire uint32) *appendCommand {
	self.expire = expire
	return self
}


func (self *appendCommand) WithCas(cas uint64) *appendCommand {
	self.cas = cas
	return self
}



type addCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Add(key []byte, value []byte) *addCommand {
	return &addCommand{
		key:   key,
		value: value,
	}
}


func (self *addCommand) WithExpire(expire uint32) *addCommand {
	self.expire = expire
	return self
}


func (self *addCommand) WithCas(cas uint64) *addCommand {
	self.cas = cas
	return self
}



type getCommand struct {
	key    []byte



}

func Get(key []byte) *getCommand {
	return &getCommand{
		key:   key,

	}
}





type incrementCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Increment(key []byte, value []byte) *incrementCommand {
	return &incrementCommand{
		key:   key,
		value: value,
	}
}


func (self *incrementCommand) WithExpire(expire uint32) *incrementCommand {
	self.expire = expire
	return self
}


func (self *incrementCommand) WithCas(cas uint64) *incrementCommand {
	self.cas = cas
	return self
}



type setCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Set(key []byte, value []byte) *setCommand {
	return &setCommand{
		key:   key,
		value: value,
	}
}


func (self *setCommand) WithExpire(expire uint32) *setCommand {
	self.expire = expire
	return self
}


func (self *setCommand) WithCas(cas uint64) *setCommand {
	self.cas = cas
	return self
}



type replaceCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Replace(key []byte, value []byte) *replaceCommand {
	return &replaceCommand{
		key:   key,
		value: value,
	}
}


func (self *replaceCommand) WithExpire(expire uint32) *replaceCommand {
	self.expire = expire
	return self
}


func (self *replaceCommand) WithCas(cas uint64) *replaceCommand {
	self.cas = cas
	return self
}



type decrementCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Decrement(key []byte, value []byte) *decrementCommand {
	return &decrementCommand{
		key:   key,
		value: value,
	}
}


func (self *decrementCommand) WithExpire(expire uint32) *decrementCommand {
	self.expire = expire
	return self
}


func (self *decrementCommand) WithCas(cas uint64) *decrementCommand {
	self.cas = cas
	return self
}



type prependCommand struct {
	key    []byte
	value  []byte
	expire uint32
	cas    uint64
}

func Prepend(key []byte, value []byte) *prependCommand {
	return &prependCommand{
		key:   key,
		value: value,
	}
}


func (self *prependCommand) WithExpire(expire uint32) *prependCommand {
	self.expire = expire
	return self
}


func (self *prependCommand) WithCas(cas uint64) *prependCommand {
	self.cas = cas
	return self
}



type serverCommand interface {
	execute(server *MemcachedServer)
}

func (self setCommand) execute(server *MemcachedServer) {
	if self.cas != 0 {
		server.cache.CompareAndSet(self.key, self.value, self.cas, self.expire)
	} else {
		server.cache.Put(self.key, self.value, self.expire)
	}
}

func (self addCommand) execute(server *MemcachedServer) {
}

func (self getCommand) execute(server *MemcachedServer) {
}

func (self replaceCommand) execute(server *MemcachedServer) {
}
