// +build !generate

package memcached

import "os"
import "io"
import "fmt"
import "net"
import "encoding/binary"

type binaryProtocolHandler struct {
	handlers []binaryRequestHandler
}

func (self binaryProtocolHandler) handleConnection(conn net.Conn, server *MemcachedServer) error {
	var header binaryRequestHeader
	var headerBuf [BINARY_HEADER_BYTES]byte
	for {
		if _, err := io.ReadFull(conn, headerBuf[:]); err != nil {
			if err == io.EOF {
				break
			}
			fmt.Fprintf(os.Stderr, "error: %+v\n", err)
			return err
		}

		header.read(headerBuf[:])
		if header.magic != BINARY_MAGIC_REQUEST {
			return fmt.Errorf("invalid magic %+v", header.magic)
		}

		bodyBuf := make([]byte, header.totalBodyLength)
		if _, err := io.ReadFull(conn, bodyBuf); err != nil {
			return err
		}

		offset := 0
		extras := bodyBuf[offset : offset+int(header.extrasLength)]
		offset += int(header.extrasLength)
		key := bodyBuf[offset : offset+int(header.keyLength)]
		offset += int(header.keyLength)
		value := bodyBuf[offset:header.totalBodyLength]

		if int(header.opcode) >= len(self.handlers) {
			return fmt.Errorf("invalid opcode")
		}
		fmt.Fprintf(os.Stderr, "request: header = %+v, key = %+v, value = %+v, extras = %+v\n", &header, key, value, extras)
		rheader, rkey, rvalue, rextras := self.handlers[header.opcode](server, &header, key, value, extras)
		fmt.Fprintf(os.Stderr, "response: header = %+v, key = %+v, value = %+v, extras = %+v\n", rheader, rkey, rvalue, rextras)

		var rbuf [BINARY_HEADER_BYTES]byte
		rheader.write(rbuf[:])

		conn.Write(rbuf[:])
		if rextras != nil {
			conn.Write(rextras)
		}
		if rkey != nil {
			conn.Write(rkey)
		}
		if rvalue != nil {
			conn.Write(rvalue)
		}
	}
	return nil
}

func newBinaryProtocolHandler() protocolHandler {
	return &binaryProtocolHandler{
		handlers: binaryRequestHandlerTable(),
	}
}

type binaryRequestHandler func(cli Memcached, header *binaryRequestHeader, key []byte, value []byte, extras []byte) (rheader *binaryResponseHeader, rkey []byte, rvalue []byte, rextras []byte)

func binaryRequestHandlerTable() []binaryRequestHandler {
	return []binaryRequestHandler{
		{{range $command := .bin_ops}}
			handle{{$command.name}}Request, // {{$command.opcode}}
		{{end}}
	}
}

func binaryErrorResponse(header *binaryRequestHeader, err *MemcachedError) (*binaryResponseHeader, []byte, []byte, []byte) {
	return &binaryResponseHeader{
			magic: BINARY_MAGIC_RESPONSE,
			opaque: header.opaque,
			opcode: header.opcode,
			status: err.ErrorCode(),
	}, nil, nil, nil
}

{{range $op := .bin_ops}}
	func handle{{$op.name}}Request(cli Memcached, header *binaryRequestHeader, key []byte, value []byte, extras []byte) (*binaryResponseHeader, []byte, []byte, []byte) {
		{{with $command := $op.command}}{{with $CommandName := $command.name | snakeToUpperCamel}}
			if len(key) {{if $command.args.has_key}}=={{else}}>{{end}} 0 {
				return binaryErrorResponse(header, newInvalidArgumentsError({{if $command.args.has_key}}"{{$op.name}} MUST have key"{{else}}"{{$op.name}} MUST NOT have key"{{end}}))
			}

			if len(value) {{if $command.args.has_value}}=={{else}}>{{end}} 0 {
				return binaryErrorResponse(header, newInvalidArgumentsError({{if $command.args.has_value}}"{{$op.name}} MUST have value"{{else}}"{{$op.name}} MUST NOT have value"{{end}}))
			}

			{{if $op.request.extra_length}}
				{{if gt $op.request.extra_length 0}}
					if len(extras) != {{$op.request.extra_length}} {
						return binaryErrorResponse(header, newInvalidArgumentsError("{{$op.name}} MUST have extras of exactly {{$op.request.extra_length}} bytes"))
					}
				{{else}}
					if len(extras) > 0 {
						return binaryErrorResponse(header, newInvalidArgumentsError("{{$op.name}} MUST NOT have extras"))
					}
				{{end}}
			{{else}}
				if len(extras) > 0 {
					return binaryErrorResponse(header, newInvalidArgumentsError("{{$op.name}} MUST NOT have extras"))
				}
			{{end}}
			{{range $extra := $op.request.extra}}
				{{$extra.name}} := binary.BigEndian.{{$extra.type | lowerToUpperCamel}}(extras[{{$extra.offset}}:])
			{{end}}

			opts := &{{$CommandName}}Options{
				{{if $command.opts.has_expire}} Expire: expire,{{end}}
				{{if $command.opts.has_cas}}    Cas:    header.cas,{{end}}
				{{if $command.opts.has_flags}}  Flags:  flags,{{end}}
				{{range $key, $value := $op.request.opts.extra}}
					{{$key | snakeToUpperCamel}}: {{$value}},
				{{end}}
			}
			{{if $command.returns.has_key}}rkey, {{end}}{{if $command.returns.has_value}}rvalue, {{end}}{{if $command.returns.has_flags}}rflags, {{end}}{{if $command.returns.has_cas}}rcas, {{end}}rerr := cli.{{$CommandName}}({{if $command.args.has_key}}key, {{end}}{{if $command.args.has_value}}value, {{end}}{{range $arg := $op.request.args.extra}}{{$arg}}, {{end}}opts)

			if rerr != nil {
				return binaryErrorResponse(header, rerr)
			}

			{{if $op.response.extra_length}}
				{{if gt $op.response.extra_length 0}}
					const rextralen = {{$op.response.extra_length}}
					var rextrabuf [rextralen]byte
					{{range $extra := $op.response.extra}}
						binary.BigEndian.Put{{$extra.type | lowerToUpperCamel}}(rextrabuf[{{$extra.offset}}:], {{$extra.name}})
					{{end}}
				{{else}}
					const rextralen = 0
				{{end}}
			{{else}}
				const rextralen = 0
			{{end}}

			rheader := &binaryResponseHeader{
				magic: BINARY_MAGIC_RESPONSE,
				opaque: header.opaque,
				opcode: header.opcode,
				{{if $command.returns.has_key}}keyLength: uint16(len(rkey)),{{end}}
				status: 0,
				totalBodyLength: uint32(rextralen{{if $command.returns.has_key}} + len(rkey){{end}}{{if $command.returns.has_value}} + len(rvalue){{end}}),
				extrasLength: uint8(rextralen),
				{{if $command.returns.has_cas}}cas: rcas,{{end}}
			}

			return rheader, {{if $command.returns.has_key}}rkey{{else}}nil{{end}}, {{if $command.returns.has_value}}rvalue{{else}}nil{{end}}, {{if $op.response.extra_length}}{{if gt $op.response.extra_length 0}}rextrabuf[:]{{else}}nil{{end}}{{else}}nil{{end}}
		{{end}}{{end}}
	}
{{end}}
